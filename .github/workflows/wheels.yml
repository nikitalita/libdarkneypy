name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - master
     - main
  release:
    types:
      - published
env:
  vcpkgCommitId: '69860f9b4c0522e82fd0d6260015339a097040e0'

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            VCPKG_DEFAULT_TRIPLET: "x64-windows-static-md"
            VCPKG_DIR: "D:\\vcpkg"
          - os: macos-latest
            VCPKG_DEFAULT_TRIPLET: "x64-osx"
            VCPKG_DIR: '/tmp/vcpkg'
          - os: ubuntu-latest
            VCPKG_DEFAULT_TRIPLET: "x64-linux"
            VCPKG_DIR: '/tmp/vcpkg'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install deps
      run: choco install wget 7zip
      if: matrix.os == 'windows-latest'

    - name: Install deps
      run: brew install yasm nasm pkg-config 7zip wget
      if: matrix.os == 'macos-latest'

    # We also run out of space on ubuntu if we don't do an apt-get clean after installing
    - name: Update apt and install deps
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt-get install -y curl zip unzip tar yasm nasm gperf libgles2-mesa-dev libx11-dev libxft-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxdamage-dev libxinerama-dev libdbus-1-dev libxtst-dev build-essential g++ apt-transport-https ca-certificates gnupg software-properties-common wget zlib1g p7zip-full
        sudo apt-get clean

    - uses: lukka/get-cmake@latest
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@main
      id: runvcpkg
      with:
        # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
        vcpkgDirectory: ${{ matrix.VCPKG_DIR }}
        # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
        vcpkgGitCommitId: '${{ env.vcpkgCommitId }}'
        # The vcpkg.json file, which will be part of cache key computation.
        vcpkgJsonGlob: '**/libdarknetpy/vcpkg.json'
        doNotCache: false

    - uses: pypa/cibuildwheel@v2.14
      env:
        CIBW_ARCHS_MACOS: x86_64 universal2
        CIBW_PRERELEASE_PYTHONS: "1"
        CIBW_SKIP: pp

    - name: Build PyPy wheels
      uses: pypa/cibuildwheel@v2.14
      env:
        CIBW_ARCHS_MACOS: x86_64 # cibuildwheel doesn't support cross compiling for PyPy
        CIBW_PRERELEASE_PYTHONS: "1"
        CIBW_SKIP: cp*
      continue-on-error: true


    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl


  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.pypi_password }}
