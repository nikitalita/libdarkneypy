name: Pip

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - main

env:
  vcpkgCommitId: '69860f9b4c0522e82fd0d6260015339a097040e0'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.11"]
        include:
          - os: windows-latest
            VCPKG_DEFAULT_TRIPLET: "x64-windows-static-md"
            VCPKG_DIR: "D:\\vcpkg"
          - os: macos-latest
            VCPKG_DEFAULT_TRIPLET: "x64-osx"
            VCPKG_DIR: '/tmp/vcpkg'
          - os: ubuntu-latest
            VCPKG_DEFAULT_TRIPLET: "x64-linux"
            VCPKG_DIR: '/tmp/vcpkg'


    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - uses: lukka/get-cmake@latest
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@main
      id: runvcpkg
      with:
        # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
        vcpkgDirectory: ${{ matrix.VCPKG_DIR }}
        # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
        vcpkgGitCommitId: '${{ env.vcpkgCommitId }}'
        # The vcpkg.json file, which will be part of cache key computation.
        vcpkgJsonGlob: '**/libdarknetpy/vcpkg.json'
        doNotCache: false

    - name: Install deps
      run: choco install wget 7zip
      if: matrix.os == 'windows-latest'

    - name: Install deps
      run: brew install yasm nasm pkg-config 7zip wget
      if: matrix.os == 'macos-latest'

    # We also run out of space on ubuntu if we don't do an apt-get clean after installing
    - name: Update apt and install deps
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt-get install -y curl zip unzip tar yasm nasm gperf libgles2-mesa-dev libx11-dev libxft-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxdamage-dev libxinerama-dev libdbus-1-dev libxtst-dev build-essential g++ apt-transport-https ca-certificates gnupg software-properties-common wget zlib1g p7zip-full
        sudo apt-get clean

    - name: Add requirements
      run: python -m pip install --upgrade wheel setuptools

    - name: Build and install
      run: pip install --verbose .[test]

    - name: Test
      run: python -m pytest
